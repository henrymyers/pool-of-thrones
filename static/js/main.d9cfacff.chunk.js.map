{"version":3,"sources":["logo.png","types.ts","components/Prediction.tsx","components/EntryRow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Status","Validity","Copydeck","jonsnow","sansastark","aryastark","branstark","cerseilannister","jaimelannister","tyrionlannister","daenerystargaryen","yaragreyjoy","theongreyjoy","eurongreyjoy","melisandre","jorahmormont","thehound","themountain","samwelltarly","gilly","littlesam","varys","brienne","davos","bronn","podrick","tormund","greyworm","gendry","bericdondarrion","isdaeneryspregnant","whokillsthenightking","whoendsupontheironthrone","Prediction","_ref","question","keys","points","_ref$showKey","showKey","entry","result","react_default","a","createElement","className","style","lineHeight","marginLeft","data-position","data-tooltip","length","map","k","index","Prediction_Answer","key","text","validity","correct","WhiteWalker","Dies","incorrect","unknown","Answer","_ref2","characters","EntryRow","lives","filter","f","Lives","deaths","walkers","rank","player","score","Prediction_Prediction","sheetUrl","mapRow","row","prop","hasOwnProperty","startsWith","replace","value","$t","addScores","entries","forEach","addRanks","scores","e","sort","b","indexOf","App","_useState","useState","_useState2","Object","slicedToArray","poolResult","setPoolResult","_useState3","_useState4","poolEntries","setPoolEntries","_useState5","_useState6","showData","setShowData","useEffect","fetch","then","response","json","allRows","feed","slice","initMaterialComponents","Fragment","paddingTop","src","logo","alt","onClick","marginBottom","item","EntryRow_EntryRow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9cfacff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8583e1a5.png\";","export enum Status {\n    Undecided = 'Undecided',\n    Lives = 'Lives',\n    Dies = 'Dies',\n    WhiteWalker = 'White Walker',\n}\n\nexport type Result = {\n    [index: string]: any;\n    player: string;\n    jonsnow: Status;\n    sansastark: Status;\n    aryastark: Status;\n    branstark: Status;\n    cerseilannister: Status;\n    jaimelannister: Status;\n    tyrionlannister: Status;\n    daenerystargaryen: Status;\n    yaragreyjoy: Status;\n    theongreyjoy: Status;\n    eurongreyjoy: Status;\n    melisandre: Status;\n    jorahmormont: Status;\n    thehound: Status;\n    themountain: Status;\n    samwelltarly: Status;\n    gilly: Status;\n    littlesam: Status;\n    varys: Status;\n    brienne: Status;\n    davos: Status;\n    bronn: Status;\n    podrick: Status;\n    tormund: Status;\n    greyworm: Status;\n    gendry: Status;\n    bericdondarrion: Status;\n    isdaeneryspregnant: string;\n    whokillsthenightking: string;\n    whoendsupontheironthrone: string;\n};\n\nexport type Entry = Result & {\n    score: number;\n    rank: number;\n};\n","import { Entry, Result, Status } from '../types';\nimport React from 'react';\n\nexport const Copydeck: any = {\n    jonsnow: 'Jon Snow',\n    sansastark: 'Sansa Stark',\n    aryastark: 'Arya Stark',\n    branstark: 'Bran Stark',\n    cerseilannister: 'Cersei Lannister',\n    jaimelannister: 'Jaime Lannister',\n    tyrionlannister: 'Tyrion Lannister',\n    daenerystargaryen: 'Daenerys Lannister',\n    yaragreyjoy: 'Yara Greyjoy',\n    theongreyjoy: 'Theon Greyjoy',\n    eurongreyjoy: 'Euron Greyjoy',\n    melisandre: 'Melisandre',\n    jorahmormont: 'Jorah Mormont',\n    thehound: 'The Hound',\n    themountain: 'The Mountain',\n    samwelltarly: 'Samwell Tarly',\n    gilly: 'Gilly',\n    littlesam: 'Little Sam',\n    varys: 'Varys',\n    brienne: 'Brienne',\n    davos: 'Davos',\n    bronn: 'Bronn',\n    podrick: 'Podrick',\n    tormund: 'Tormund',\n    greyworm: 'Grey Worm',\n    gendry: 'Gendry',\n    bericdondarrion: 'Beric Dondarrion',\n    isdaeneryspregnant: 'Is Daenerys pregnant?',\n    whokillsthenightking: 'Who kills the night king?',\n    whoendsupontheironthrone: 'Who ends up on the Iron Throne?',\n};\n\nexport type PredictionProps = {\n    question: string;\n    keys: (keyof Result)[];\n    points: string;\n    showKey?: boolean;\n    entry: Entry;\n    result: Result;\n};\n\nexport const Prediction = ({\n    question,\n    keys,\n    points,\n    showKey = false,\n    entry,\n    result,\n}: PredictionProps) => {\n    const getValidity = (key: keyof Result): Validity => {\n        if (!result[key]) {\n            return Validity.unknown;\n        } else if (result[key] === entry[key]) {\n            return Validity.correct;\n        } else if (result[key] === Status.WhiteWalker && entry[key] === Status.Dies) {\n            return Validity.correct;\n        } else {\n            return Validity.incorrect;\n        }\n    };\n\n    return (\n        <div className=\"prediction\">\n            <h6 className=\"valign-wrapper\" style={{ lineHeight: '1' }}>\n                {question}\n                <i\n                    className=\"material-icons tooltipped grey-text\"\n                    style={{ marginLeft: '10px' }}\n                    data-position=\"top\"\n                    data-tooltip={points}\n                >\n                    info_outline\n                </i>\n            </h6>\n            <div>\n                {keys.length > 0 &&\n                    keys.map((k, index) => (\n                        <Answer\n                            key={index}\n                            text={showKey ? Copydeck[k] : entry[k]}\n                            validity={getValidity(k)}\n                        />\n                    ))}\n                {!keys.length && <div className=\"grey-text\">No one</div>}\n            </div>\n        </div>\n    );\n};\n\nexport enum Validity {\n    correct = 'correct',\n    incorrect = 'incorrect',\n    unknown = 'unknown',\n}\n\nexport type AnswerProps = {\n    text: string;\n    validity: Validity;\n};\n\nexport const Answer = ({ text, validity }: AnswerProps) => {\n    return (\n        <span className={'tag ' + validity}>\n            <strong>{text}</strong>\n            {validity === Validity.correct && <i className=\"material-icons right\">check</i>}\n            {validity === Validity.incorrect && <i className=\"material-icons right\">clear</i>}\n        </span>\n    );\n};\n","import React from 'react';\nimport { Entry, Result, Status } from '../types';\nimport { Prediction } from './Prediction';\nimport './EntryRow.css';\n\nconst characters: (keyof Result)[] = [\n    'jonsnow',\n    'sansastark',\n    'aryastark',\n    'branstark',\n    'cerseilannister',\n    'jaimelannister',\n    'tyrionlannister',\n    'daenerystargaryen',\n    'yaragreyjoy',\n    'theongreyjoy',\n    'eurongreyjoy',\n    'melisandre',\n    'jorahmormont',\n    'thehound',\n    'themountain',\n    'samwelltarly',\n    'gilly',\n    'littlesam',\n    'varys',\n    'brienne',\n    'davos',\n    'bronn',\n    'podrick',\n    'tormund',\n    'greyworm',\n    'gendry',\n    'bericdondarrion',\n];\n\nexport const EntryRow = ({ entry, result }: { entry: Entry; result: Result }) => {\n    const lives = characters.filter(f => entry[f] === Status.Lives);\n    const deaths = characters.filter(f => entry[f] === Status.Dies);\n    const walkers = characters.filter(f => entry[f] === Status.WhiteWalker);\n\n    return (\n        <ul className=\"collapsible no-border\">\n            <li>\n                <div className=\"collapsible-header primary hoverable white-text no-border valign-wrapper\">\n                    <span className=\"entry-rank neutral z-depth-2\">{entry.rank}</span>\n                    <span className=\"entry-name\">{entry.player}</span>\n                    <span className=\"badge white-text\">\n                        {entry.score} {entry.score > 1 ? 'points' : 'point'}\n                    </span>\n                </div>\n                <div className=\"collapsible-body white no-border\">\n                    <Prediction\n                        question=\"Who dies?\"\n                        points=\"1pt per correct answer\"\n                        keys={deaths}\n                        showKey={true}\n                        entry={entry}\n                        result={result}\n                    />\n                    <Prediction\n                        question=\"Who becomes a white walker?\"\n                        points=\"2pts per correct answer\"\n                        keys={walkers}\n                        showKey={true}\n                        entry={entry}\n                        result={result}\n                    />\n                    <Prediction\n                        question=\"Who lives?\"\n                        points=\"1pt per correct answer\"\n                        keys={lives}\n                        showKey={true}\n                        entry={entry}\n                        result={result}\n                    />\n                    <Prediction\n                        question=\"Is Daenerys pregnant?\"\n                        points=\"1pt if correct\"\n                        keys={['isdaeneryspregnant']}\n                        entry={entry}\n                        result={result}\n                    />\n                    <Prediction\n                        question=\"Who kills the night king?\"\n                        points=\"2pts if correct\"\n                        keys={['whokillsthenightking']}\n                        entry={entry}\n                        result={result}\n                    />\n                    <Prediction\n                        question=\"Who ends up on the Iron Throne?\"\n                        points=\"4pts if correct\"\n                        keys={['whoendsupontheironthrone']}\n                        entry={entry}\n                        result={result}\n                    />\n                </div>\n            </li>\n        </ul>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { AutoInit as initMaterialComponents } from 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport './App.css';\nimport logo from './logo.png';\nimport { Entry, Result, Status } from './types';\nimport { EntryRow } from './components';\n\nconst sheetUrl =\n    'https://spreadsheets.google.com/feeds/list/1F6niOY6NGLMFD0PxMITgZ0iThof5zVeCKSswuqRB0XE/1/public/values?alt=json';\n\nconst mapRow = (row: any): Result => {\n    let result = {} as Result;\n\n    for (let prop in row) {\n        if (row.hasOwnProperty(prop) && prop.startsWith('gsx$')) {\n            const key = prop.replace('gsx$', '');\n            const value = row[prop];\n            result[key] = (value && value.$t) || null;\n        }\n    }\n\n    return result;\n};\n\nconst addScores = (entries: Entry[], result: Result) => {\n    if (!entries || !result) {\n        return;\n    }\n\n    entries.forEach(entry => {\n        let score = 0;\n\n        for (let prop in result) {\n            if (result.hasOwnProperty(prop)) {\n                if (result[prop] === entry[prop]) {\n                    if (prop === 'whoendsupontheironthrone') {\n                        // Correctly predicted who won the game of thrones\n                        score += 4;\n                    } else if (prop === 'whokillsthenightking') {\n                        // Correctly predicted the night king's killer\n                        score += 2;\n                    } else if (prop === 'isdaeneryspregnant') {\n                        // Correctly predicted pregnancy\n                        score += 1;\n                    } else if (entry[prop] === Status.WhiteWalker) {\n                        // Correctly predicted White Walker\n                        score += 2;\n                    } else {\n                        // Default value for matching answers\n                        score += 1;\n                    }\n                } else if (result[prop] === Status.WhiteWalker && entry[prop] === Status.Dies) {\n                    // White walkers also count as deaths\n                    score += 1;\n                }\n            }\n        }\n\n        entry.score = score;\n    });\n};\n\nconst addRanks = (entries: any[]) => {\n    let scores = entries.map(e => e.score).sort((a, b) => b - a); // Sort in ascending order\n\n    entries.forEach(entry => {\n        entry.rank = scores.indexOf(entry.score) + 1;\n    });\n};\n\nfunction App() {\n    const [poolResult, setPoolResult] = useState();\n    const [poolEntries, setPoolEntries] = useState();\n    const [showData, setShowData] = useState(false);\n\n    const toggleVisibility = () => {\n        setShowData(!showData);\n    };\n\n    useEffect(() => {\n        fetch(sheetUrl)\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(response) {\n                let allRows: any[] = (response && response.feed && response.feed.entry) || [];\n                allRows = allRows.map(mapRow);\n\n                let result = allRows[0];\n                setPoolResult(result);\n\n                let entries = allRows.slice(1);\n                addScores(entries, result);\n                addRanks(entries);\n                entries = entries.sort((a, b) => a.rank - b.rank);\n                setPoolEntries(entries);\n            });\n    }, []);\n\n    useEffect(() => {\n        initMaterialComponents(); // Material CSS components\n    }, [showData]);\n\n    return (\n        <>\n            <header style={{ paddingTop: showData ? '6vh' : '30vh' }}>\n                <img src={logo} className=\"logo\" alt=\"logo\" />\n                {!poolEntries && (\n                    <div>\n                        <div className=\"progress\">\n                            <div className=\"indeterminate\" />\n                        </div>\n                        <div className=\"white-text\">Loading predictions...</div>\n                    </div>\n                )}\n                {poolEntries && !showData && (\n                    <div>\n                        <h6 className=\"danger-text\">\n                            WARNING: The following pool results may contain spoilers.\n                        </h6>\n                        <a\n                            className=\"waves-effect waves-light btn-large primary u-mt\"\n                            onClick={toggleVisibility}\n                        >\n                            Show Results\n                        </a>\n                    </div>\n                )}\n            </header>\n            <main className=\"container u-mt\" style={{ marginBottom: '6vh' }}>\n                {poolEntries &&\n                    showData &&\n                    poolEntries.map((item: Entry, index: number) => (\n                        <EntryRow entry={item} result={poolResult} key={index} />\n                    ))}\n            </main>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}